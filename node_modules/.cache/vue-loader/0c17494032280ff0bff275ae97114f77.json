{"remainingRequest":"/Users/bogdansinica/Downloads/anima-project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/bogdansinica/Downloads/anima-project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/bogdansinica/Downloads/anima-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bogdansinica/Downloads/anima-project/src/screens/BeastyFansByHtml.vue?vue&type=template&id=06b8ccc6","dependencies":[{"path":"/Users/bogdansinica/Downloads/anima-project/src/screens/BeastyFansByHtml.vue","mtime":1698590055864},{"path":"/Users/bogdansinica/Downloads/anima-project/node_modules/cache-loader/dist/cjs.js","mtime":1698588906647},{"path":"/Users/bogdansinica/Downloads/anima-project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1698588907230},{"path":"/Users/bogdansinica/Downloads/anima-project/node_modules/cache-loader/dist/cjs.js","mtime":1698588906647},{"path":"/Users/bogdansinica/Downloads/anima-project/node_modules/vue-loader/lib/index.js","mtime":1698588907083}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}